/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <xparameters.h>
#include <xil_types.h>
#include <sleep.h>
#include "platform.h"
#include "xil_printf.h"

#define GPIO_DATA_OFFSET 0x0

// State definitions
#define IDLE 0
#define EXEC 1
#define DONE 2

// GPIO pointers
volatile uint32_t* led_gpio_data  = (volatile uint32_t*)(XPAR_GPIO_0_BASEADDR + GPIO_DATA_OFFSET);
volatile uint32_t* sw_gpio_data   = (volatile uint32_t*)(XPAR_GPIO_1_BASEADDR + GPIO_DATA_OFFSET);
volatile uint32_t* accum_btn_data = (volatile uint32_t*)(XPAR_GPIO_2_BASEADDR + GPIO_DATA_OFFSET);
volatile uint32_t* reset_btn_data = (volatile uint32_t*)(XPAR_GPIO_3_BASEADDR + GPIO_DATA_OFFSET);

void software_reset(uint32_t* accumulator) {
    *accumulator = 0;
    *led_gpio_data = 0;
    //xil_printf("=== SOFTWARE RESET ===\r\n");
    xil_printf("Accumulator cleared to 0\r\n");
}

int main()
{
    init_platform();

    uint32_t accumulator = 0;
    int state = IDLE;
    int prev_accum_btn = 1; // Assume not pressed
    int prev_reset_btn = 1; // Assume not pressed

    *led_gpio_data = 0x0000;
//    xil_printf("System Starting... LEDs ON\r\n");
//    sleep(1);
//    *led_gpio_data = 0x0000;
//    xil_printf("LEDs OFF - System Ready\r\n");
//    sleep(1);

    xil_printf("Controls:\r\n");
    xil_printf("  - btn[1]: Accumulate switch values\r\n");
    xil_printf("  - btn[0]: Reset accumulator\r\n");
    xil_printf("Initial accumulator: %d\r\n", accumulator);

    while (1) {
        int current_accum_btn = *accum_btn_data & 0x1;
        int current_reset_btn = *reset_btn_data & 0x1;
        int switch_value = *sw_gpio_data & 0xFFFF;

        // Check for reset button press (falling edge)
        if (prev_reset_btn == 1 && current_reset_btn == 0) {
            software_reset(&accumulator);
            state = IDLE; // Reset state machine
        }

        // State machine for accumulation
        switch (state) {
            case IDLE:
                // Detect accumulate button press (falling edge)
                if (prev_accum_btn == 1 && current_accum_btn == 0) {
                    state = EXEC;
                    xil_printf("Accumulate button pressed...\r\n");
                }
                break;

            case EXEC:
                // Add switch value to accumulator
                accumulator += switch_value;
                *led_gpio_data = accumulator & 0xFFFF;
                xil_printf("Added %d, Accumulator: %d\r\n", switch_value, accumulator);
                state = DONE;
                break;

            case DONE:
                // Wait for accumulate button release
                if (current_accum_btn == 1) {
                    state = IDLE;
                    xil_printf("Ready for next input\r\n");
                }
                break;
        }

        // Update previous button states for edge detection
        prev_accum_btn = current_accum_btn;
        prev_reset_btn = current_reset_btn;

        usleep(10000); // 10ms delay
    }

    cleanup_platform();
    return 0;
}
